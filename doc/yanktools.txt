*yanktools.txt*    yanktools     Version 0.6.0    Last change: March 29 2018

YANKTOOLS - TABLE OF CONTENTS                                        *yanktools*
==============================================================================

Features.............................................|yanktools-features|
Manual mode..........................................|yanktools-manual|
Other commands.......................................|yanktools-misc|
Automatic mode.......................................|yanktools-automatic|
Basic options........................................|yanktools-basic|
Cycle yank stack.....................................|yanktools-cycle|
Preview stacks.......................................|yanktools-preview|
Register redirection.................................|yanktools-redirection|
Replace operator.....................................|yanktools-replace|
Duplicate text.......................................|yanktools-duplicate|
Zeta mode............................................|yanktools-zeta|
Visual mode..........................................|yanktools-visual|
Options..............................................|yanktools-options|
Interactive paste....................................|yanktools-interactive|
Mappings.............................................|yanktools-mappings|
Convenient remaps....................................|yanktools-convenient|
Credits..............................................|yanktools-credits|
License..............................................|yanktools-license|



INTRODUCTION ~
==============================================================================

Yanktools is a plugin inspired by |vim-yankstack| and |vim-easyclip|.
It can be used in manual mode (default) or automatic mode (not recommended).

To install, use {vim-plug}{1} or any other Vim plugin manager.

                                      {1} https://github.com/junegunn/vim-plug
With |vim-plug|:
>
    Plug 'mg979/vim-yanktools'





FEATURES LIST                                               *yanktools-features*
==============================================================================


General:~

* Stacks: yanks and deletions are stored in a list, that can be cycled at
  cursor position, back and forth, with a specific keybinding. It keeps the
  properties of the last paste command (autoformat, paste before, etc).

* Black hole redirection: `c`, `C`, `x`, `X`, <del>

* Swap-&-paste or preview (in preview window) yank stack entries

* Paste in visual mode won't change the default register.

* Replace operator: replace text objects with register. Works with swap too.

* Duplicate operator: lines, text objects or from visual mode.

* Zeta mode: a disposable yank stack, from which items are taken from the
  back, and pasting them removes them from the stack as well. You can populate
  the stack both by yanking and deleting.

* Autoindent: you can toggle it, or use a prefix to the normal
  mappings to perform a single indented paste.

* Interactive paste (also with |fzf-vim|)

* Convert yank type: convert selected register to/from blockwise.

* |repeat-vim| support: yanktools supports it for most paste operations.


Automatic mode (not recommended!):~

* Stacks are filled automatically at every yank/delete operation.




MANUAL MODE                                                   *yanktools-manual*
==============================================================================

By default, the key `s` is used for both saving into the stack, and for the
replace operator. This will remap the default vim `s` key. If this is
a problem for you, read |yanktools-mappings|.

Defined operators and their default behaviour:

  `sy`  (yank & save)    add yanked text to the yank stack
  `sd`  (delete & save)  add deleted text to the yank stack
  `s`   (replace)        replace text object with register
  `yd`  (duplicate)      duplicate text object

Further notes:

- yank and delete commands add the text to the yank stack
- `change` and `x` commands redirect to the black hole register

Special mappings:
  
  <M-p>        cycle the stack (+1) and paste
  <M-P>        cycle the stack (-1) and paste
  `]y`           cycle the stack (+1) and open preview window
  `[y`           cycle the stack (-1) and open preview window

Visual mode mappings:

  `sy`           yank & save
  `sd`           delete & save
  `x` <del>      black hole deletion
  <M-d>        duplicate

Zeta mode (|yanktools-zeta|):

  `yz`           yank
  `dz`           delete
  `zp`           paste
  `ZY`           visual yank
  `ZD`           visual delete
  `ZP`           visual paste





OTHER COMMANDS                                                  *yanktools-misc*
==============================================================================

  Mappings for special actions/options use `yu`:

  `yus`      save current [register] into the yank stack
  `yuc`      convert [register] type (ch.wise/blockwise -> linewise, and vv.)
  `yui`      interactive paste
  `yur`      toggle recording mode (all yanks/deletions will be recorded)
  `yuai`     toggle autoindent
  `yuxs`     clear yank stack
  `yuxz`     clear zeta stack
  `yuY`      display yank stack
  `yuZ`      display zeta stack
  `yu?`      print this list of mappings


This is all for the recommended (MANUAL) mode.





AUTOMATIC MODE                                             *yanktools-automatic*
==============================================================================

This was the old behaviour, but I think it's too pervasive, therefore it's
disabled by default. Enable with:
>
  let g:yanktools_manual = 0
<
NOTE: Much of what follows concerns the automatic mode, and not relevant by
default.





BASIC OPTIONS                                                  *yanktools-basic*
==============================================================================




CYCLE YANK STACK                                               *yanktools-cycle*
==============================================================================

Default mappings for cycling the yank stack are <M-p> / <M-P> (forward/back).

If you press one of these keys before doing a paste, it will paste the last
entry of the stack (the last yanked item), using 'P' (paste before).

If you press another paste key (p, <p, <P...), the stack will be cycled
keeping the properties of that paste command (before or after, move cursor at
end, autoindent, etc).

Eg. you press `<P` (formatted paste before), cycling the stack will keep
pasting before, and applying autoformat.

Simply moving the cursor after a swap resets this command.




PREVIEW YANK STACKS                                          *yanktools-preview*
==============================================================================

By pressing `]y` or `[y`, you will move to a different position in the stack,
and also open a preview window with the current entry. This window closes if
you move the cursor, or paste the entry.

You can preview items also by pressing `yY` (normal stack) or `yZ` (zeta stack).




REGISTER REDIRECTION                                     *yanktools-redirection*
==============================================================================

By default, `c`, `C`, `x`, `X` and `<Del>` redirect to the black hole register.
In visual mode, the pasted text will not overwrite the default register.

You can still specify a register and it will override the default redirection:
>
  cc     will change the line while redirecting to black hole register
  "xcc   will change the line while using register "x"





REPLACE OPERATOR                                            *yanktools-replace*
=============================================================================

By default it's mapped to `s` (`ss` to replace lines), and it accepts
a register from which to paste.

The `replace line` command can have two different behaviours:

- `ss` will replace [count] lines with a single instance of the register
  (this behaviour is the same as in ReplaceWithRegister plugin).

- `srr` will instead replace each line in [count] with the register
  content, while keeping the order of multiline entries.

The `replace line` command is repeatable (with `vim-repeat`).

Plugs and default mappings:

  <Plug>(ReplaceOperator)           s       repeatable
  <Plug>(ReplaceLineSingle)         ss      replace [count] lines
  <Plug>(ReplaceLineMulti)          srr     replace each of [count] lines




DUPLICATE OPERATOR                                         *yanktools-duplicate*
==============================================================================

Duplicate lines, text object, or visually selected text. Duplicated text won't
overwrite the default register. Repeatable.

Note that DuplicateLines with [count] duplicates the same single line [count]
times, if you want to duplicate different lines use the operator (|j| or |_|).

Plugs and default mappings:

  <Plug>(DuplicateOperator)    yd
  <Plug>(DuplicateLines)       <M-d>
  <Plug>(DuplicateVisual)      <M-d>




ZETA MODE                                                       *yanktools-zeta*
==============================================================================

By postponing the `z` key to a yank/delete command, you can create a disposable
yank stack, from which elements are taken from the bottom when pasting, and
immediately removed. Example:

    `text 1`    (yzy)
    `text 2`    (yzy)
    `text 3`    (yzy)

the key sequence `zpzpzp` would then recreate the same sequence and consume the
stack.

Note: to paste `zp` or `zP` are used.
Note: visual mode uses uppercase Z mappings -> `ZY`, `ZD`, `ZP`

Plugs, if you want to remap them:

  <Plug>(ZetaYank)           yz
  <Plug>(ZetaYankVisual)     ZY
  <Plug>(ZetaDelete)         dz
  <Plug>(ZetaDeleteLine)     dzd
  <Plug>(ZetaDeleteVisual)   ZD
  <Plug>(ZetaPaste_p)        zp
  <Plug>(ZetaPaste_P)        zP
  <Plug>(ZetaPasteVisual)    ZP
                                                            *g:yanktools_zeta*
To disable the default `zeta` mappings:
>
  let g:yanktools_zeta = 0





REPEAT.VIM                                                *yanktools-repeat-vim*
==============================================================================

This plugin supports |repeat-vim| for most `paste` operations. This means that
you can press |dot| to repeat the last paste command while keeping the same
formatting options of the last command. The `replace operator` is also
repeatable.

Zeta mode is also supported: press "|.|" (dot) to continue pasting from the zeta
stack, until the stack is consumed.

                                                          *g:yanktools_repeat*
`vim-repeat` integration can be disabled by setting:
>
  let g:yanktools_repeat = 0





AUTOFORMAT                                                *yanktools-autoformat*
==============================================================================
                                                   *g:yanktools_format_prefix*
                                                 *g:yanktools_auto_format_all*

|g:yanktools_format_prefix| controls autoformat for single pastes, while
|g:yanktools_auto_format_all| controls the global behaviour. If the latter is
`false`, the former will autoindent the current paste. And viceversa.

The command `ToggleAutoIndent` (mapping `cyi`) will toggle it on and off.

                                           *g:yanktools_move_cursor_after_paste*

you can configure an option to always move the cursor at the end of the pasted
content:
>
  let g:yanktools_move_cursor_after_paste = 1
<
Some commands (replace operator, zeta paste) use this method by default.




OPTIONS SUMMARY                                              *yanktools-options*
==============================================================================

Option                                        | Default            ~
----------------------------------------------+------------------------
g:yanktools_paste_keys                        |  ['p', 'P']
                                              |
g:yanktools_black_hole_c                      |  1
g:yanktools_black_hole_x                      |  1
g:yanktools_black_hole_del                    |  1
                                              |
g:yanktools_replace_key                       |  ''
g:yanktools_replace_to_bh                     |  1
                                              |
g:yanktools_format_prefix                     |  '<'
                                              |
g:yanktools_move_cursor_after_paste           |  0
g:yanktools_auto_format_all                   |  0
----------------------------------------------+------------------------




MAPPINGS                                                    *yanktools-mappings*
==============================================================================

Some plugs that have not been mentioned:

--------------------------------------------+------------------------------
Plug                                        | Default                    ~
--------------------------------------------+------------------------------
<Plug>(Paste_<key>)                         | <key>
<Plug>(PasteIndent_<key>)                   | <leader><key>
                                            |
<Plug>(SwapPasteNext)                       | <M-p>
<Plug>(SwapPastePrevious)                   | <M-P>
                                            |
<Plug>(ToggleAutoIndent)                    | cyi
<Plug>(ClearYankStack)                      | cys
<Plug>(ClearZetaStack)                      | czs
<Plug>(FreezeYank)                          | cyf
<Plug>(ConvertYankType)                     | cyt
<Plug>(YanktoolsMenu)                       | cym
<Plug>(Yanks)                               | yY
<Plug>(ZetaYanks)                           | yZ
<Plug>(ISelectYank)                         | yiy
<Plug>(ISelectYank!)                        | yir





CONVENIENT REMAPS                       *convenient-remaps* *yanktools-convenient*
==============================================================================
                                                 *g:yanktools_convenient_remaps*

Some convenient mappings you can add to your vimrc:
>
  " assuming you use 's' for the replace operator
  nmap S s$
  nmap sx "xs
  nmap sxx "xss
  nmap sX "xs$
  xmap sx "xp
  xmap sX $"xp

  map [p <Plug>(PasteIndent_P)
  map ]p <Plug>(PasteIndent_p)
>
  " if you can use meta-mappings
  nmap <M-d> <Plug>(DuplicateLines)
  xmap <M-d> <Plug>(DuplicateVisual)

  " if you cannnot use meta-mappings
  nmap m. <Plug>(SwapPasteNext)
  nmap m, <Plug>(SwapPastePrevious)





CREDITS                                                      *yanktools-credits*
==============================================================================

Bram Moolenaar for Vim
Steve Vermeulen for |vim-easyclip|
Max Brunsfeld for |vim-yankstack|





LICENSE                                                      *yanktools-license*
==============================================================================

MIT


==============================================================================
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:expandtab
