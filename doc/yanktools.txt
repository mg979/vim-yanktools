*yanktools.txt*    yanktools     Version 0.6.0    Last change: March 29 2018

YANKTOOLS - TABLE OF CONTENTS                                        *yanktools*
==============================================================================

Features.............................................|yanktools-features|
Usage................................................|yanktools-usage|
Other commands.......................................|yanktools-misc|
Recording mode.......................................|yanktools-recording|
Cycle yank stack.....................................|yanktools-cycle|
Preview stacks.......................................|yanktools-preview|
Register redirection.................................|yanktools-redirection|
Replace operator.....................................|yanktools-replace|
Duplicate text.......................................|yanktools-duplicate|
Zeta mode............................................|yanktools-zeta|
Repeat..............................................|.yanktools-repeat|
Interactive paste....................................|yanktools-interactive|
Mappings.............................................|yanktools-mappings|
Credits..............................................|yanktools-credits|
License..............................................|yanktools-license|



INTRODUCTION ~
==============================================================================

Yanktools is a plugin inspired by |vim-yankstack| and |vim-easyclip|.

To install, use {1} or any other Vim plugin manager.

                                      {1} https://github.com/junegunn/vim-plug
With |vim-plug|:
>
    Plug 'mg979/vim-yanktools'



FEATURES LIST                                               *yanktools-features*
==============================================================================


* Stacks: yanks and deletions are stored in a list, that can be cycled at
  cursor position, back and forth, with a specific keybinding. It keeps the
  properties of the last paste command (autoformat, paste before, etc).

* Manual and Recording modes: stacks will be filled with specific mappings, or
  automatically at every yank/delete operation, respectively. Can be toggled.

* Black hole redirection: `c`, `C`, `x`, `X`, <del>

* Swap-&-paste or preview (in preview window) yank stack entries

* Paste in visual mode won't change the default register.

* Replace operator: replace text objects with register. Repeatable.

* Duplicate operator: lines, text objects or from visual mode. Repeatable.

* Zeta mode: a disposable yank stack, from which items are taken from the
  back, and pasting them removes them from the stack as well. You can populate
  the stack both by yanking and deleting.

* Autoindent: you can toggle it, or use a prefix to the normal
  mappings to perform a single indented paste.

* Interactive paste (also with |fzf-vim|)

* Convert yank type: convert selected register to/from blockwise.

* |repeat-vim| support: for most paste operations.



USAGE                                                          *yanktools-usage*
==============================================================================

The main concept is to have a dedicated stack, where yanks and deletions can
be stored and later accessed, so to have a `clipboard history` in vim.

The main difference between this and other plugins of this kind, is that
saving yanks and deletions in the stack isn't an automatic process.

Adding a new item (yank or deletion) to the yank stack is the result of
either:

* a yank/deletion performed with a specific mapping
* saving a register directly in the stack
* enabling the `recording mode`, that allows automatic addition to the stack

For simplicity, the default key used by this plugin is the `s` key.
This key is used for both saving into the stack, and for the replace operator.

This will remap the default vim `s` key. If this is a problem for you, read
|yanktools-mappings|.

Defined operators and their default behaviour:

  `sy`  (yank & save)    add yanked text to the yank stack
  `sd`  (delete & save)  add deleted text to the yank stack
  `s`   (replace)        replace text object with register
  `yd`  (duplicate)      duplicate text object

Further notes:

- yank and delete commands add the text to the yank stack
- `change` and `x` commands redirect to the _ register (unless specified)

Other normal mode mappings:
  
  `]p`           paste after the cursor and autoindent
  `[p`           paste before the cursor and autoindent
  <M-p>        cycle the stack (+1) and paste
  <M-P>        cycle the stack (-1) and paste
  `]y`           cycle the stack (+1) and open preview window
  `[y`           cycle the stack (-1) and open preview window

Visual mode mappings:

  `sy`           yank & save
  `sd`           delete & save
  `x` <del>      black hole deletion
  <M-d>        duplicate

Zeta mode (|yanktools-zeta|):

 Normal                 Visual ~
  `yz`        yank         `ZY` 
  `dz`        delete       `ZD` 
  `zp`        paste        `ZP` 



OTHER COMMANDS                                                  *yanktools-misc*
==============================================================================

  Mappings for special commands/options use `yu`:

  `yus`      save current [register] into the yank stack
  `yuc`      convert [register] type (ch.wise/blockwise -> linewise, and vv.)
  `yui`      interactive paste
  `yur`      toggle recording mode (all yanks/deletions will be recorded)
  `yuo`      set stack offset (index) to [count] (0 if not given)
  `yuai`     toggle autoindent
  `yuxs`     clear yank stack
  `yuxz`     clear zeta stack
  `yuY`      display yank stack
  `yuZ`      display zeta stack
  `yu?`      print this list of mappings



RECORDING MODE                                             *yanktools-recording*
==============================================================================

Default mapping: `yur`

By enabling this mode, all yanks and deletions done with the default keys (|y|
and |d|) will be saved in the yank stack. It can be toggled.



CYCLE YANK STACK                                               *yanktools-cycle*
==============================================================================

Default mappings for cycling the yank stack are <M-p> / <M-P> (forward/back).

If you press one of these keys before doing a paste, it will paste the last
entry of the stack (the last yanked item), using 'P' (paste before).

If you press another paste key (p, [p, ]p...), the stack will be cycled
keeping the properties of that paste command (before or after, move cursor at
end, autoindent, etc).



PREVIEW YANK STACKS                                          *yanktools-preview*
==============================================================================

By pressing `]y` or `[y`, you will move to a different position in the stack,
and also open a preview window with the current entry. This window closes if
you move the cursor, or paste the entry.

You can preview items also by pressing `yY` (normal stack) or `yZ` (zeta stack).

You can set an arbitrary index in the stack with [count]`yuo`



REGISTER REDIRECTION                                     *yanktools-redirection*
==============================================================================

By default, `c`, `C`, `x`, `X` and `<Del>` redirect to the black hole register.
In visual mode, the pasted text will not overwrite the default register.

You can still specify a register and it will override the default redirection:
>
  cc     will change the line while redirecting to black hole register
  "xcc   will change the line while using register "x"



REPLACE OPERATOR                                             *yanktools-replace*
==============================================================================

By default it's mapped to `s` (`ss` to replace lines), and it accepts
a register from which to paste. Fully repeatable in all variations.

The `replace line` command can have two different behaviours:

- `ss` will replace [count] lines with a single instance of the register.

- `srr` will instead replace each line in [count] with the register
  content.

Plugs and default mappings:

  <Plug>(ReplaceOperator)           s       repeatable
  <Plug>(ReplaceLineSingle)         ss      replace [count] lines
  <Plug>(ReplaceLineMulti)          srr     replace each of [count] lines



DUPLICATE OPERATOR                                         *yanktools-duplicate*
==============================================================================

Duplicate lines, text object, or visually selected text. Duplicated text won't
overwrite the default register. Repeatable.

Note that DuplicateLines with [count] duplicates the same single line [count]
times, if you want to duplicate different lines use the operator (|j| or |_|).

Plugs and default mappings:

  <Plug>(DuplicateOperator)    yd
  <Plug>(DuplicateLines)       <M-d>
  <Plug>(DuplicateVisual)      <M-d>



ZETA MODE                                                       *yanktools-zeta*
==============================================================================

By postponing the `z` key to a yank/delete command, you can create a disposable
yank stack, from which elements are taken from the bottom when pasting, and
immediately removed. Example:

    `text 1`    (yzy)
    `text 2`    (yzy)
    `text 3`    (yzy)

the key sequence `zpzpzp` would then recreate the same sequence and consume the
stack.

Note: to paste `zp` or `zP` are used.
Note: visual mode uses uppercase Z mappings -> `ZY`, `ZD`, `ZP`



REPEAT.VIM                                                *yanktools-repeat-vim*
==============================================================================

This plugin supports |repeat-vim| for most `paste` operations. This means that
you can press |dot| to repeat the last paste command while keeping the same
formatting options of the last command.

Zeta mode is also supported: press "|.|" (dot) to continue pasting from the zeta
stack, until the stack is consumed.



OPTIONS                                                      *yanktools-options*
==============================================================================
                                                    
                                                      *g:yanktools_autoindent*
  Default: 0

If autoindentation for paste commands should be enabled by default. The
command `ToggleAutoIndent` (mapping `yuai`) will toggle it on and off.

                                                      *g:yanktools_move_after*
  Default: 0

If you want the cursor to always move at the end of the pasted content.
Some commands (replace operator, zeta paste) use this method by default.

                                            *g:yanktools_start_in_record_mode*
  Default: 0

If you want `recording mode` (|yanktools-recording|) to be enabled by default.

                                                          *g:yanktools_repeat*
  Default: 1

Enable/disable vim-repeat integration.
                                                   *g:yanktools_max_text_size*
  Default: 1000

Text bigger than this number of characters will never be added to the yank
stack. The zeta stack ignores this restriction.



MAPPINGS                                                    *yanktools-mappings*
==============================================================================

You can override every single mapping by defining your own: each mapping is
only assigned if the corresponding <Plug> hasn't been assigned by you.

                                                     *g:yanktools_no_mappings*
  Default: 0

Completely disable mappings assignment. Plugs are still available, and you'll
need to assign them by yourself.

                                                        *g:yanktools_main_key*
  Default: ''

Unless mappings are disabled, you must set this variable, or you will get an
error before entering vim. The content of this variable will be the default 
prefix for yank, delete and replace operators. Recommended value: 's'.

                                                     *g:yanktools_options_key*
  Default: 'yu'

This will be the prefix for special commands.

                                                      *g:yanktools_black_hole*
  Default: 1

Map c/x/<del> so that they use the black hole register by default (|_|),
unless a specific register is provided.

                                                        *g:yanktools_map_zeta*
  Default: 1

Map the plugs for the zeta stack.

==============================================================================

Plugs and default mappings. Mappings assume |g:yanktools_main_key| to be 's'.

---------------------------------------+---------+----------------------------
Plug                                   |  Modes  | Default                    ~
---------------------------------------+---------+----------------------------
<Plug>(Yank)                           |   n x   |  sy
<Plug>(Cut)                            |   n x   |  sd
<Plug>(CutLine)                        |   n     |  sdd
<Plug>(Paste_p)                        |   n x   |  p
<Plug>(Paste_P)                        |   n x   |  P
<Plug>(PasteIndent_p)                  |   n     |  ]p
<Plug>(PasteIndent_P)                  |   n     |  [p
<Plug>(ReplaceOperator)                |   n     |  s
<Plug>(ReplaceLineSingle)              |   n     |  ss
<Plug>(ReplaceLineMulti)               |   n     |  srr
<Plug>(Duplicate)                      |   n x   |  yd / <M-d>
<Plug>(DuplicateLines)                 |   n     |  <M-d>
                                       |         |
<Plug>(SwapPasteNext)                  |   n     |  <M-d>
<Plug>(SwapPastePrevious)              |   n     |  <M-d>
<Plug>(ChooseNext)                     |   n     |  ]y
<Plug>(ChoosePrevious)                 |   n     |  [y
                                       |         |
<Plug>(ZetaYank)                       |   n x   |  yz / ZY
<Plug>(ZetaDelete)                     |   n x   |  yz / ZD
<Plug>(ZetaDeleteLine)                 |   n     |  yz
<Plug>(ZetaPaste_p)                    |   n x   |  zp / ZP
<Plug>(ZetaPaste_P)                    |   n     |  zP
                                       |         |
<Plug>(YankSaveCurrent)                |   n     |  yus
<Plug>(ConvertYankType)                |   n     |  yuc
<Plug>(InteractivePaste)               |   n     |  yui
<Plug>(ToggleRecordYanks)              |   n     |  yur
<Plug>(FreezeYank)                     |   n     |  yuf
<Plug>(ToggleAutoIndent)               |   n     |  yuai
<Plug>(ClearYankStack)                 |   n     |  yuxs
<Plug>(ClearZetaStack)                 |   n     |  yuxz
<Plug>(Yanks)                          |   n     |  yuY
<Plug>(ZetaYanks)                      |   n     |  yuZ
<Plug>(YanktoolsHelp)                  |   n     |  yu?



CREDITS                                                      *yanktools-credits*
==============================================================================

Bram Moolenaar for Vim
Steve Vermeulen for |vim-easyclip|
Max Brunsfeld for |vim-yankstack|



LICENSE                                                      *yanktools-license*
==============================================================================

License: Same terms as Vim itself (see |license|)


==============================================================================
vim:tw=78:cc=79:sw=2:ts=2:ft=help:norl:nowrap:expandtab
