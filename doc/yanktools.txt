*yanktools.txt*    yanktools     Version 0.6.0    Last change: March 29 2018

YANKTOOLS - TABLE OF CONTENTS                                    *yanktools-toc*
==============================================================================

Introduction.........................................|yanktools-intro|
Installation.........................................|yanktools-installation|
Features.............................................|yanktools-features|
Basic usage..........................................|yanktools-usage|
Basic options........................................|yanktools-basic|
Cycle yank stack.....................................|yanktools-cycle|
Register redirection.................................|yanktools-redirection|
Redirected stack.....................................|yanktools-redirected-stack|
Replace operator.....................................|yanktools-replace|
Duplicate text.......................................|yanktools-duplicate|
Zeta mode............................................|yanktools-zeta|
Options..............................................|yanktools-options|
Interactive paste....................................|yanktools-interactive|
Other commands.......................................|yanktools-misc|
Mappings.............................................|yanktools-mappings|
Convenient remaps....................................|yanktools-convenient|
Credits..............................................|yanktools-credits|
License..............................................|yanktools-license|



INTRODUCTION                                                   *yanktools-intro*
==============================================================================

Yanktools is a plugin inspired by |vim-yankstack| and |vim-easyclip|, and it
takes elements from both. You should expect all features from vim-easyclip,
plus some new ones.




INSTALLATION                                            *yanktools-installation*
==============================================================================

Use {vim-plug}{1} or any other Vim plugin manager.

                                      {1} https://github.com/junegunn/vim-plug
With |vim-plug|:
>
    Plug 'mg979/vim-yanktools'




FEATURES LIST                                               *yanktools-features*
==============================================================================

* Cycle yank stack: all yanks are stored in a list, that can be cycled at
  cursor position, back and forth, with a specific keybinding. It keeps the
  properties of the last paste command (autoformat, paste before, etc).

* Black hole redirection: `c`, `C`, `x`, `X`, <del>

* Register redirection: `d` and `D` are redirected to another register
  (default 'x'), without replacing the unnamed register.

* Paste in visual mode won't change the default register.

* Since register redirection is an option, pasting from that register has its
  own mapping. This can also be used in combination with the replace operator.

* Redirected text fills its own stack, so that you can cycle/paste from it too.

* Replace operator: replace text objects with register.

* |zeta-mode| (by default it uses `z` as key) that fills a disposable yank stack,
  from which items are taken from the back, and pasting them removes them from
  the stack as well. You can populate the stack both by yanking and cutting.

* Autoindent: you can toggle it, or use a prefix to the normal
  mappings to perform a single indented paste.

* Interactive paste (also with |fzf-vim|)

* Convert yank type: convert selected register between linewise and blockwise.

* |repeat-vim| support: yanktools supports it for most paste operations.

* and some more...




BASIC USAGE                                                    *yanktools-usage*
==============================================================================

There are many functions available, but you don't need to use them all or even
know about them. Yank/paste/delete/change commands work as usual, but by
default:

* `yank` commands add yanked text to the yank stack
* you can cycle the yank stack with the 'swap' commands (default <M-p> / <M-P>)

* `delete` commands redirect the deleted text to register 'x'
* you can paste from the redirected register with <leader>p/P
* you can cycle the redirected stack with the 'swap' commands after <leader>p/P

* `change` and `x` commands redirect to the black hole register

* you can use the |replace-operator| to replace motions or lines.

* `duplicate` lines/selected text with <M-d> (not overwriting default register)

Have a look at |convenient-remaps| if you want mappings similar to |vim-unimpaired|.




BASIC OPTIONS                                                  *yanktools-basic*
==============================================================================
																								*g:yanktools_use_single_stack*
																								*g:yanktools_replace_operator*

The most important options, with their defaults:
>
	let g:yanktools_use_single_stack = 0

Set to 1 if you want a single stack for both yank and delete operations, so
that you can cycle among all of them, instead of having separate stacks.
>
	let g:yanktools_replace_operator = ''

Set to `s` or another character if you want to use the replace operator.
>
	let g:yanktools_format_prefix = '<'

Perform an autoindented paste/replacement by preponing this prefix.

See also |yanktools-redirected-stack| and |yanktools-replace-operator|.




CYCLE YANK STACK                                               *yanktools-cycle*
==============================================================================

Default mappings for cycling the yank stack are <M-p> / <M-P> (forward/back).

If you press one of these keys before doing a paste, it will paste the last
entry of the stack (the last yanked item), using 'P' (paste before).

If you press another paste key (p, <p, <P...), the stack will be cycled
keeping the properties of that paste command (before or after, move cursor at
end, autoindent, etc).

Eg. you press `<P` (formatted paste before), cycling the stack will keep
pasting before, and applying autoformat.

Simply moving the cursor after a swap resets this command.

By default, deleted (redirected) text builds its own stack, so you can cycle
it by using these commands, after having performed a paste from the redirected
register (default '<leader>p').




REGISTER REDIRECTION                                     *yanktools-redirection*
==============================================================================
                                                   *g:yanktools_black_hole_keys*
                                                     *g:yanktools_redirect_keys*
                                                *g:yanktools_redir_paste_prefix*
                                                 *g:yanktools_redirect_register*

By default, `c`, `C`, `x`, `X` and `<Del>` redirect to the black hole register,
while `d` and `D` redirect to a special register (default "x").  You
can paste directly from this register with <leader>p/P.

Normally, when you yank to a specific register, you overwrite at the same time
the unnamed register, but this won-t happen here, since it is restored to its
previous content after each delete/change operation.

In visual mode, the pasted text will not overwrite the default register.

You can still specify a register and it will override the default redirection:
>
  dd     will delete the line while redirecting to register "x"
  "_dd   will delete the line while redirecting to black hole register
  cc     will change the line while redirecting to black hole register
  "xcc   will change the line while redirecting to register "x"

You can define the keys that redirect to the black hole/alternative register:
>
  let g:yanktools_black_hole_c    = 1
  let g:yanktools_black_hole_x    = 1
  let g:yanktools_black_hole_del  = 1
  let g:yanktools_redirect_delete = 1

You can change the default prefix for redirected paste:
>
  let g:yanktools_redir_paste_prefix = '<leader>'

You can redefine the default register for redirection:
>
  let g:yanktools_redirect_register = 'x'



REDIRECTED STACK                                   *yanktools-redirected-stack*
=============================================================================
                                                 *g:yanktools_use_single_stack*

Text that is deleted (redirected), even if it doesn't overwrite the unnamed
register, can still be added to the normal yank stack, so that deleted text
will appear when cycling the stack. Otherwise, you will use a dedicated
stack for deleted items.
>
  let g:yanktools_use_single_stack = 0

- true: deleted text is added to the yank stack.
- false (default): deleted text is added to its own stack.

In the latter case, the kind of stack you'll be using when cycling, will
depend on the key you used for pasting:

- normal paste                   -> will use normal stack when cycling
- paste from redirected register -> will use redirected stack




REPLACE OPERATOR                  *replace-operator* *yanktools-replace-operator*
=============================================================================
                                              *g:yanktools_replace_operator_bh*

Here assuming that mapping is `s` for the operator, `ss` to replace whole lines.

Both `s` and `ss` accept a register from which to paste. You can therefore
create a mapping such as:
>
  map sx "xs
  map sxx "xss
<
That is, a mapping for an operator that replaces from the redirected register,
to complement the normal replacement mode.

The 'replace line' command can have two different behaviours:

- `ss` will replace [count] lines with a single instance of the register
  (this behaviour is the same as in ReplaceWithRegister plugin).

- `<leader>ss` will instead replace each line in [count] with the register
  content, while keeping the order of multiline entries.




DUPLICATE TEXT                                   *duplicate* *yanktools-duplicate*
==============================================================================
                                                     *g:yanktools_duplicate_key*

Duplicate lines with [count], or visually selected text. Duplicated text won't
overwrite the default register. Repeatable with repeat.vim (not in visual
mode).

Default mapping is <M-d>. To redefine it:
>
  let g:yanktools_duplicate_key = '<M-d>'



ZETA MODE                                             *zeta-mode* *yanktools-zeta*
==============================================================================
                                 *g:yanktools_zeta_prefix* *g:yanktools_zeta_kill*

By postponing the `z` key to a yank/delete command, you can create a disposable
yank stack, from which elements are taken from the bottom when pasting, and
immediately removed. Example:

    `text 1`    (yzy)
    `text 2`    (yzy)
    `text 3`    (yzy)

the key sequence `zpzpzp` would then recreate the same sequence and consume the
stack. Note that to paste `zp` or `zp` are used.



REPEAT.VIM                                                *yanktools-repeat-vim*
==============================================================================

This plugin supports |repeat-vim| for most paste operations. This means that
you can press |dot| to repeat the last paste command while keeping the same
formatting options of the last command.

|zeta-mode| is also supported: press "|.|" (dot) to continue pasting from the zeta
stack, until the stack is consumed.

The |replace-operator| is also repeatable, though it doesn't need |repeat-vim|.



AUTOFORMAT                                                *yanktools-autoformat*
==============================================================================
																									 *g:yanktools_format_prefix*
																								 *g:yanktools_auto_format_all*

|g:yanktools_format_prefix| controls autoformat for single pastes, while
|g:yanktools_auto_format_all| controls the global behaviour. If the latter is
`false`, the former will autoindent the current paste. And viceversa.

The command `ToggleAutoIndent` (mapping `cyi`) will toggle it on and off.

                                           *g:yanktools_move_cursor_after_paste*

you can configure an option to always move the cursor at the end of the pasted
content:
>
  let g:yanktools_move_cursor_after_paste = 1
<
Some commands (replace operator, zeta paste) use this method by default.



OTHER COMMANDS                                                  *yanktools-misc*
==============================================================================

  cym      yanktools menu
  cyi      toggle autoindent
  cys      clear yank stacks
  czs      clear zeta stack
  cyt      convert yank type  (turns a blockwise yank to linewise, and vv.)
  yY       show yanks
  yX       show redirected yanks
  yZ       show zeta yanks
  yI       interactively select a yank



OPTIONS SUMMARY                                              *yanktools-options*

----------------------------------------------+------------------------
Option                                        | Default            ~
----------------------------------------------+------------------------
|g:yanktools_paste_keys|                        |  ['p', 'P']
                                              |
|g:yanktools_redirect_delete|                   |  1
|g:yanktools_redirect_register|                 |  'x'
|g:yanktools_redir_paste_prefix|                |  '<leader>'
                                              |
|g:yanktools_black_hole_c|                      |  1
|g:yanktools_black_hole_x|                      |  1
|g:yanktools_black_hole_del|                    |  1
                                              |
|g:yanktools_replace_operator|                  |  's'
|g:yanktools_replace_operator_bh|               |  1
|g:yanktools_duplicate_key|                     |  '<M-d>'
                                              |
|g:yanktools_format_prefix|                     |  '<'
|g:yanktools_zeta|                              |  'z'
                                              |
|g:yanktools_use_single_stack|                  |  0
|g:yanktools_move_cursor_after_paste|           |  0
|g:yanktools_auto_format_all|                   |  0
----------------------------------------------+------------------------

You can change these options to control which keys redirect to which register,
the default register for redirection, the prefixes used for several mapping
types, etc.



MAPPINGS                                                    *yanktools-mappings*

--------------------------------------------+------------------------------
Plug                                        | Default                    ~
--------------------------------------------+------------------------------
<Plug>(Paste_<key>)                         | <key>
<Plug>(PasteIndent_<key>)                   | \<key>
<Plug>(PasteRedirected_<key>)               | <key>
<Plug>(PasteRedirectedIndent_<key>)         | \<key>
                                            |
<Plug>(ReplaceOperator)                     | s
<Plug>(ReplaceLineSingle)                   | ss
<Plug>(ReplaceLineMulti)                    | <leader>ss
                                            |
<Plug>(DuplicateNormal)                     | <M-d>
<Plug>(DuplicateVisual)                     | <M-d>
                                            |
<Plug>(SwapPasteNext)                       | <M-p>
<Plug>(SwapPastePrevious)                   | <M-P>
                                            |
<Plug>(ToggleAutoIndent)                    | cyi
<Plug>(ClearYankStack)                      | cys
<Plug>(ClearZetaStack)                      | czs
<Plug>(FreezeYank)                          | cyf
<Plug>(ConvertYankType)                     | cyt
<Plug>(YanktoolsMenu)                       | cym
<Plug>(Yanks)                               | yY
<Plug>(RedirectedYanks)                     | yX
<Plug>(ZetaYanks)                           | yZ
<Plug>(ISelectYank)                         | yI



CONVENIENT REMAPS                       *convenient-remaps* *yanktools-convenient*
==============================================================================
                                                 *g:yanktools_convenient_remaps*

Some convenient mappings you can add to your vimrc:
>
  call yanktools#init#maps()

  nmap S s$
  nmap sx "xs
  nmap sxx "xss
  nmap sX "xs$

  xmap D $d
  xmap P $p
  xmap sx "xp
  xmap sX $"xp

  map [p <Plug>(PasteIndent_P)
  map ]p <Plug>(PasteIndent_p)
  map =p <Plug>(PasteRedirectedIndent_p)
  map -p <Plug>(PasteRedirectedIndent_P)
>



CREDITS                                                      *yanktools-credits*
==============================================================================

Braam Moolenaar for Vim
Steve Vermeulen for |vim-easyclip|
Max Brunsfeld for |vim-yankstack|




LICENSE                                                      *yanktools-license*
==============================================================================

MIT


==============================================================================
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:


