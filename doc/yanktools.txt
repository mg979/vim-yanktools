*yanktools.txt*    yanktools     Version 0.6.0    Last change: March 29 2018

YANKTOOLS - TABLE OF CONTENTS                                    *yanktools-toc*
==============================================================================

Introduction.........................................|yanktools-intro|
Installation.........................................|yanktools-installation|
Features.............................................|yanktools-features|
Basic usage..........................................|yanktools-usage|
Basic options........................................|yanktools-basic|
Cycle yank stack.....................................|yanktools-cycle|
Register redirection.................................|yanktools-redirection|
Redirected stack.....................................|yanktools-redirected-stack|
Cut operator.........................................|yanktools-cut|
Replace operator.....................................|yanktools-replace|
Duplicate text.......................................|yanktools-duplicate|
Zeta mode............................................|yanktools-zeta|
Visual mode..........................................|yanktools-visual|
Options..............................................|yanktools-options|
Interactive paste....................................|yanktools-interactive|
Other commands.......................................|yanktools-misc|
Mappings.............................................|yanktools-mappings|
Convenient remaps....................................|yanktools-convenient|
Credits..............................................|yanktools-credits|
License..............................................|yanktools-license|



INTRODUCTION                                                   *yanktools-intro*
==============================================================================

Yanktools is a plugin inspired by |vim-yankstack| and |vim-easyclip|, and it
takes elements from both. You should expect all features from vim-easyclip,
plus some new ones.




INSTALLATION                                            *yanktools-installation*
==============================================================================

Use {vim-plug}{1} or any other Vim plugin manager.

                                      {1} https://github.com/junegunn/vim-plug
With |vim-plug|:
>
    Plug 'mg979/vim-yanktools'




FEATURES LIST                                               *yanktools-features*
==============================================================================

* Cycle yank stack: all yanks are stored in a list, that can be cycled at
  cursor position, back and forth, with a specific keybinding. It keeps the
  properties of the last paste command (autoformat, paste before, etc).

* Black hole redirection: `c`, `C`, `x`, `X`, <del>

* Register redirection: `d` and `D` are redirected to another register
  (default 'x'), without replacing the unnamed register.

* Paste in visual mode won't change the default register.

* Since register redirection is an option, pasting from that register has its
  own mapping. This can also be used in combination with the replace operator.

* Redirected text fills its own stack, so that you can swap/paste from it too.

* Replace operator: replace text objects with register. Works with swap too.

* Duplicate operator: lines, text objects or from visual mode.

* Zeta mode: a disposable yank stack, from which items are taken from the
  back, and pasting them removes them from the stack as well. You can populate
  the stack both by yanking and cutting.

* Autoindent: you can toggle it, or use a prefix to the normal
  mappings to perform a single indented paste.

* Interactive paste (also with |fzf-vim|)

* Convert yank type: convert selected register between linewise and blockwise.

* |repeat-vim| support: yanktools supports it for most paste operations.

* and some more...




BASIC USAGE                                                    *yanktools-usage*
==============================================================================

There are many functions available, but you don't need to use them all or even
know about them.

Defined operators and their default behaviour:

* `y`   (yank)        add yanked text to the yank stack
* `d`   (delete)      redirect the deleted text to register 'x'
* `yr`    (replace)     replace text object with register
* `yd`  (duplicate)   text objects/lines/visual
* `yx`  (cut)         deletes, but doesn't redirect to register 'x'

Further notes:

- yank commands add the yanked text to the yank stack
- you can cycle the yank stack with the 'swap' commands (default <M-p> / <M-P>)

- delete commands add the deleted text to the redirected stack
- you can paste from the redirected register with <leader>p/P
- you can cycle the redirected stack with the 'swap' commands after <leader>p/P

- `change` and `x` commands redirect to the black hole register
- visual `x` cuts instead of doing black hole deletion
- visual mode mapping for `duplicate` is `D`

Have a look at |convenient-remaps| if you want mappings similar to |vim-unimpaired|.




BASIC OPTIONS                                                  *yanktools-basic*
==============================================================================

The most important options, with their defaults:
>
  let g:yanktools_use_redirection = 1

Set to 0 if you want a single stack for both yank and delete operations, so
that you can cycle among all of them, instead of having separate stacks.
This will disable redirection, but can be toggled with mapping `cyr`.
>
  let g:yanktools_replace_key = ''

Set to `s` or another character if you want an easy mapping for the replace
operator. Otherwise it will default to `yr`.
>
  let g:yanktools_format_prefix = '<'

Perform an autoindented paste/replacement by preponing this prefix.

See also |yanktools-redirected-stack| and |yanktools-replace-operator|.




CYCLE YANK STACK                                               *yanktools-cycle*
==============================================================================

Default mappings for cycling the yank stack are <M-p> / <M-P> (forward/back).

If you press one of these keys before doing a paste, it will paste the last
entry of the stack (the last yanked item), using 'P' (paste before).

If you press another paste key (p, <p, <P...), the stack will be cycled
keeping the properties of that paste command (before or after, move cursor at
end, autoindent, etc).

Eg. you press `<P` (formatted paste before), cycling the stack will keep
pasting before, and applying autoformat.

Simply moving the cursor after a swap resets this command.

By default, deleted (redirected) text builds its own stack, so you can cycle
it by using these commands, after having performed a paste from the redirected
register (default '<leader>p').




REGISTER REDIRECTION                                     *yanktools-redirection*
==============================================================================
                                                    *g:yanktools_black_hole_c*
                                                    *g:yanktools_black_hole_x*
                                                  *g:yanktools_black_hole_del*
                                              *g:yanktools_redir_paste_prefix*
                                               *g:yanktools_redirect_register*

By default, `c`, `C`, `x`, `X` and `<Del>` redirect to the black hole register,
while `d` and `D` redirect to a special register (default "x").  You
can paste directly from this register with <leader>p/P.

Normally, when you yank to a specific register, you overwrite at the same time
the unnamed register, but this won't happen here, since it is restored to its
previous content after each delete/change operation.

In visual mode, the pasted text will not overwrite the default register.

You can still specify a register and it will override the default redirection:
>
  dd     will delete the line while redirecting to register "x"
  "_dd   will delete the line while redirecting to black hole register
  cc     will change the line while redirecting to black hole register
  "xcc   will change the line while redirecting to register "x"

You can define the keys that redirect to the black hole register:
>
  let g:yanktools_black_hole_c    = 1
  let g:yanktools_black_hole_x    = 1
  let g:yanktools_black_hole_del  = 1

You can change the default prefix for redirected paste:
>
  let g:yanktools_redir_paste_prefix = '<leader>'

You can redefine the default register for redirection:
>
  let g:yanktools_redirect_register = 'x'



SINGLE VS DOUBLE STACK                             *yanktools-redirected-stack*
=============================================================================
                                                 *g:yanktools_use_redirection*

If register redirection is active, text that is deleted is redirected to its
own separate stack. If you prefer using a single stack for both yank and
delete operations, set:
>
  let g:yanktools_use_redirection = 0

- `true` (default): deleted text is redirected and added to its own stack.
- `false`: deleted text is not redirected and is added to the yank stack.

In the first case, the kind of stack you'll be using when cycling will
depend on the key you used for pasting:

- normal paste                   -> will use normal stack when cycling
- paste from redirected register -> will use redirected stack

Setting this option to false will effectively disable register redirection,
but it can be toggled with mapping `cyr` ('change use redirection').



CUT OPERATOR                                                    *yanktools-cut*
=============================================================================

The `cut` operator is the inverse of the delete operator.

If redirection is active, it will delete but not redirect, and the deleted
text will be added to the normal yank stack. On the contrary, if redirection
is disabled, the deleted text will be forcibly redirected, and added to the
redirected stack.

Note that in visual mode the key `x` is assigned to this command, so that `d`
and `x` have different behaviours. <del> in visual mode redirects to the black
hole register.

Plugs and default mappings:

    <Plug>(CutOperator) yx
    <Plug>(CutLine)     yxx
    <Plug>(CutVisual)   x



REPLACE OPERATOR                                            *yanktools-replace*
=============================================================================
                                                *g:yanktools_replace_key*

By default it's mapped to `yr` (`yrr` to replace lines), and it accepts a
register from which to paste.

There are two variants:

- `yr` repeatable with dot, but not swappable
- `yR` swappable, but not repeatable with dot

The `replace line` command can have two different behaviours:

- `yrr` will replace [count] lines with a single instance of the register
  (this behaviour is the same as in ReplaceWithRegister plugin).

- `<leader>yrr` will instead replace each line in [count] with the register
  content, while keeping the order of multiline entries.

The `replace line` command is both swappable and repeatable (with `vim-repeat`).

Plugs and default mappings:

  <Plug>(ReplaceOperatorR)          yr      repeatable, non-swappable
  <Plug>(ReplaceOperator)           yR      swappable, non-repeatable
  <Plug>(ReplaceFormatOperator)     <yr     replace and indent, non-repeatable
  <Plug>(ReplaceLineSingle)         yrr     replace [count] lines
  <Plug>(ReplaceLineFormatSingle)   <yrr    ,, ,, and indent
  <Plug>(ReplaceLineMulti)          \yrr    replace each of [count] lines
  <Plug>(ReplaceLineFormatMulti)    \<yrr   ,, ,, and indent

For easier mappings, set for example:
>
  let g:yanktools_replace_key = 's'

mappings will become:
>
  yr      ->    s
  yR      ->    sr
  <yr     ->    <s
  yrr     ->    ss
  <yrr    ->    <ss
  \yrr    ->    \ss
  \<yrr   ->    \<ss



DUPLICATE OPERATOR                                         *yanktools-duplicate*
==============================================================================

Duplicate lines, text object, or visually selected text. Duplicated text won't
overwrite the default register. `DuplicateLines` is repeatable with repeat.vim, 
the operator version doesn't need it.

Plugs and default mappings:

  <Plug>(DuplicateOperator)    yd
  <Plug>(DuplicateLines)       ydd
  <Plug>(DuplicateVisual)      D



ZETA MODE                                                       *yanktools-zeta*
==============================================================================

By postponing the `z` key to a yank/delete command, you can create a disposable
yank stack, from which elements are taken from the bottom when pasting, and
immediately removed. Example:

    `text 1`    (yzy)
    `text 2`    (yzy)
    `text 3`    (yzy)

the key sequence `zpzpzp` would then recreate the same sequence and consume the
stack. Note that to paste `zp` or `zp` are used.

Note: that visual mode uses uppercase Z mappings -> `Zy`, `Zd`, `Zp`


VISUAL MODE                                                   *yanktools-visual*
==============================================================================

A summary of the default mappings for visual mode:

p             paste from default register
<leader>p     paste from redirected register
d             delete and redirect
D             duplicate
x             cut (doesn't redirect if redirection is active and vv.)
<del>         black hole deletion
Zy            zeta yank
Zd            zeta delete
Zp            zeta paste


REPEAT.VIM                                                *yanktools-repeat-vim*
==============================================================================

This plugin supports |repeat-vim| for most paste operations. This means that
you can press |dot| to repeat the last paste command while keeping the same
formatting options of the last command.

Zeta mode is also supported: press "|.|" (dot) to continue pasting from the zeta
stack, until the stack is consumed.

The replace operator is also repeatable, but only the `replace line(s)` variant.



AUTOFORMAT                                                *yanktools-autoformat*
==============================================================================
                                                   *g:yanktools_format_prefix*
                                                 *g:yanktools_auto_format_all*

|g:yanktools_format_prefix| controls autoformat for single pastes, while
|g:yanktools_auto_format_all| controls the global behaviour. If the latter is
`false`, the former will autoindent the current paste. And viceversa.

The command `ToggleAutoIndent` (mapping `cyi`) will toggle it on and off.

                                           *g:yanktools_move_cursor_after_paste*

you can configure an option to always move the cursor at the end of the pasted
content:
>
  let g:yanktools_move_cursor_after_paste = 1
<
Some commands (replace operator, zeta paste) use this method by default.



OTHER COMMANDS                                                  *yanktools-misc*
==============================================================================

  cyi      toggle autoindent
  cyr      toggle redirection
  cys      clear yank stacks
  czs      clear zeta stack
  cyt      convert yank type  (turns a blockwise yank to linewise, and vv.)
  cym      yanktools menu (fzf only)

  yiy      interactively select a yank
  yir      interactively select a redirected yank

  yY       show yanks
  yX       show redirected yanks
  yZ       show zeta yanks



OPTIONS SUMMARY                                              *yanktools-options*
==============================================================================
Option                                        | Default            ~
----------------------------------------------+------------------------
g:yanktools_paste_keys                        |  ['p', 'P']
                                              |
g:yanktools_use_redirection                   |  1
g:yanktools_redirect_register                 |  'x'
g:yanktools_redir_paste_prefix                |  '<leader>'
                                              |
g:yanktools_black_hole_c                      |  1
g:yanktools_black_hole_x                      |  1
g:yanktools_black_hole_del                    |  1
                                              |
g:yanktools_replace_key                       |  ''
g:yanktools_replace_to_bh                     |  1
                                              |
g:yanktools_format_prefix                     |  '<'
                                              |
g:yanktools_move_cursor_after_paste           |  0
g:yanktools_auto_format_all                   |  0
----------------------------------------------+------------------------




MAPPINGS                                                    *yanktools-mappings*
==============================================================================

Some plugs that have not been mentioned:

--------------------------------------------+------------------------------
Plug                                        | Default                    ~
--------------------------------------------+------------------------------
<Plug>(Paste_<key>)                         | <key>
<Plug>(PasteIndent_<key>)                   | <leader><key>
<Plug>(PasteRedirected_<key>)               | <key>
<Plug>(PasteRedirectedIndent_<key>)         | <leader><key>
                                            |
<Plug>(SwapPasteNext)                       | <M-p>
<Plug>(SwapPastePrevious)                   | <M-P>
                                            |
<Plug>(ToggleRedirection)                   | cyr
<Plug>(ToggleAutoIndent)                    | cyi
<Plug>(ClearYankStack)                      | cys
<Plug>(ClearZetaStack)                      | czs
<Plug>(FreezeYank)                          | cyf
<Plug>(ConvertYankType)                     | cyt
<Plug>(YanktoolsMenu)                       | cym
<Plug>(Yanks)                               | yY
<Plug>(RedirectedYanks)                     | yX
<Plug>(ZetaYanks)                           | yZ
<Plug>(ISelectYank)                         | yiy
<Plug>(ISelectYank!)                        | yir



CONVENIENT REMAPS                       *convenient-remaps* *yanktools-convenient*
==============================================================================
                                                 *g:yanktools_convenient_remaps*

Some convenient mappings you can add to your vimrc:
>
  " assuming you use 's' for the replace operator
  nmap S s$
  nmap sx "xs
  nmap sxx "xss
  nmap sX "xs$
  xmap sx "xp
  xmap sX $"xp

  map [p <Plug>(PasteIndent_P)
  map ]p <Plug>(PasteIndent_p)
  map =p <Plug>(PasteRedirectedIndent_p)
  map -p <Plug>(PasteRedirectedIndent_P)
>
  " if you can use meta-mappings
  nmap <M-d> <Plug>(DuplicateLines)
  xmap <M-d> <Plug>(DuplicateVisual)

  " if you cannnot use meta-mappings
  nmap m. <Plug>(SwapPasteNext)
  nmap m, <Plug>(SwapPastePrevious)


NOTES AND ISSUES                                               *yanktools-notes*
==============================================================================

As you will understand, this plugin is rather far-fetching and complex.
Therefore, if posting issues, consider that I'm there to fix bugs, but not for
adding/tweaking features.

If you want to remap some function, use the <Plug>s to remap them to your
leasure.



CREDITS                                                      *yanktools-credits*
==============================================================================

Braam Moolenaar for Vim
Steve Vermeulen for |vim-easyclip|
Max Brunsfeld for |vim-yankstack|




LICENSE                                                      *yanktools-license*
==============================================================================

MIT


==============================================================================
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:


