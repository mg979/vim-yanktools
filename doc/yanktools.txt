*yanktools.txt*    yanktools     Version 0.6.0    Last change: March 29 2018

YANKTOOLS - TABLE OF CONTENTS                                      *yanktools*
==============================================================================

Features.............................................|yanktools-features|
Usage................................................|yanktools-usage|
Other commands.......................................|yanktools-misc|
Recording mode.......................................|yanktools-recording|
Cycle yank stack.....................................|yanktools-cycle|
Register redirection.................................|yanktools-redirection|
Replace operator.....................................|yanktools-replace|
Duplicate text.......................................|yanktools-duplicate|
Zeta stack...........................................|yanktools-zeta|
Repeatability........................................|yanktools-repeat|
Control stacks.......................................|yanktools-control|
Mappings.............................................|yanktools-mappings|
Options..............................................|yanktools-options|
Plugs................................................|yanktools-plugs|
Ex commands..........................................|yanktools-ex|
Persistance..........................................|yanktools-persistance|
Credits..............................................|yanktools-credits|
License..............................................|yanktools-license|



INTRODUCTION ~
==============================================================================

Yanktools is a plugin inspired by |vim-yankstack| and |vim-easyclip|.

To install, use {1} or any other Vim plugin manager.

                                      {1} https://github.com/junegunn/vim-plug
With |vim-plug|:
>
    Plug 'mg979/vim-yanktools'



FEATURES LIST                                             *yanktools-features*
==============================================================================


* Stacks: yanks and deletions are stored in a list, that can be cycled at
  cursor position, back and forth, with a specific keybinding, swapping
  elements of the stack, and keeping properties of the last paste command
  (autoformat, paste before, etc).

* Manual and Recording modes: stacks will be filled with specific mappings, or
  automatically at every yank/delete operation, respectively. Can be toggled.

* Black hole redirection: `x`, `X`, <del>

* Unnamed register restoring: `c`, `C`, visual paste

* Swap-&-paste: cycle among stack elements, or show them in popup/preview
  window.

* Replace operator: replace text objects with register. Repeatable.

* Duplicate operator: lines, text objects or from visual mode. Repeatable.

* Zeta mode: a disposable yank stack, from which items are taken from the
  back, and pasting them removes them from the stack as well. You can populate
  the stack both by yanking and deleting.

* Autoindent: you can toggle it, or use mappings to perform a single indented
  paste.

* Interactive paste: with preview window or |fzf-vim|

* Convert yank type: convert selected register to/from blockwise.




USAGE                                                        *yanktools-usage*
==============================================================================

The main concept is to have a dedicated stack, where yanks and deletions can
be stored and later accessed, so to have a `clipboard history` in vim.

The main difference between this and other plugins of this kind, is that
saving yanks and deletions in the stack isn't an automatic process, at least
by default.

Adding a new item (yank or deletion) to the yank stack is the result of
either:

* a yank/deletion performed with a specific mapping
* saving a register directly in the stack
* enabling the `recording mode`, that allows automatic addition to the stack

A main key should be defined, and this key will used for both saving into the
stack, and for the replace operator. I recommend the 's' key.
>
  let g:yanktools_main_key = 's'

Read |yanktools-mappings| for more details.

Defined operators and their default behaviour (assuming 's' as main key):

  `sy`  (save yank)      add yanked text to the yank stack
  `sd`  (save delete)    add deleted text to the yank stack
  `sc`  (save change)    add changed text to the yank stack
  `s`   (substitute)     replace text object with register
  `yd`  (duplicate)      duplicate text object

Visual mode mappings:

  `sy`           save yank
  `sd`           save delete
  `sc`           save change
  `x` <del>      black hole deletion
  <M-d>        duplicate

Other normal mode mappings:

  `]p`           paste after the cursor and autoindent
  `[p`           paste before the cursor and autoindent
  <M-p>        cycle the stack (+1) and paste
  <M-P>        cycle the stack (-1) and paste
  `]y`           cycle the stack (+1)
  `[y`           cycle the stack (-1)
  `]Y`           cycle the stack (+1) (with preview window)
  `[Y`           cycle the stack (-1) (with preview window)

Zeta mode (|yanktools-zeta|):

 Normal                 Visual ~
  `yz`        yank         `ZY`
  `dz`        delete       `ZD`
  `zp`        paste        `ZP`

Recommended settings:
>
  let g:yanktools_main_key = 's'

  " make 'S' replace until the end of the line
  nmap      S s$
  nmap      Y y$



COMMANDS                                                  *yanktools-commands*
==============================================================================

  Mappings for special commands/options use `yu`:

  `yus`      save current [register] into the yank stack
  `yuc`      convert [register] type (ch.wise/blockwise -> linewise, and vv.)
  `yup`      interactive paste with preview
  `yui`      interactive paste
  `yur`      toggle recording mode (all yanks/deletions will be recorded)
  `yu0`      set stack offset (index) to {first} + [count]
  `yuai`     toggle autoindent
  `yuxy`     clear yank stack
  `yuxz`     clear zeta stack
  `yuY`      display yank stack
  `yuZ`      display zeta stack
  `yu?`      print this list of mappings

Note: `yu0` selects index 0, the 'first' element of the stack: that actually
means the last inserted element. So 2`yu0` selects 'two elements before the
last inserted'. Press `yuY` to understand better what this means.

Note: with the `yuY` and `yuZ` mappings, the current yank and zeta stack will
be displayed, and you will be able to delete an index from them, if desired.




RECORDING MODE                                           *yanktools-recording*
==============================================================================

Default mapping: `yur`

By enabling this mode, all yanks and deletions done with the default keys (|y|
and |d|) will be saved in the yank stack. It can be toggled.

Note: this works by temporarily mapping yank and delete keys to plugs.
By temporarily, I mean that they will be unmapped when you toggle off
recording mode. If you remapped those commands already, you'll get a message
in the command line, and those keys won't be mapped.
A single exception is made for:
>
  n[nore]map Y y$

that is, you will not be notified if you have such a mapping.




CYCLE YANK STACK                                             *yanktools-cycle*
==============================================================================

Default mappings for cycling the yank stack are <M-p> / <M-P> (forward/back).

If you press one of these keys before doing a paste, it will paste the last
entry of the stack (the last yanked item), using 'P' (paste before).

If you press another paste key (p, [p, ]p...), the stack will be cycled
keeping the properties of that paste command (before or after, move cursor at
end, autoindent, etc).



REGISTER REDIRECTION                                   *yanktools-redirection*
==============================================================================

By default, `x`, `X` and `<Del>` redirect to the black hole register.
Neither the unnamed or the small-delete register (|quote-|) are overwritten.

`c` and `C` work normally, except that the unnamed register isn't overwritten.
Repeating changes with the . command will overwrite it though.

In visual mode, the pasted text will not overwrite the default register.

You can still specify a register and it will skip redirection:
>
  cc     will change the line while restoring the unnamed register
  "xcc   will change the line while using register "x"

Finally, you can save the changed text in the stack with `sc` + text object.
See |yanktools-usage|.



REPLACE OPERATOR                                           *yanktools-replace*
==============================================================================

By default it's mapped to `s` (`ss` to replace lines), and it accepts
a register from which to paste. Fully repeatable in all variations.

The `replace line` command can have two different behaviours:

- `ss` will replace [count] lines with a single instance of the register.

- `srr` will instead replace each line in [count] with the register
  content.

         Plug                  Mapping           replaces...~
------------------------------------------------------------------------------
  <Plug>(Replace)              s                 text object
  <Plug>(ReplaceLine)          ss                [count] lines
  <Plug>(ReplaceLines)         srr               each of [count] lines



DUPLICATE OPERATOR                                       *yanktools-duplicate*
==============================================================================

Duplicate lines, text object, or visually selected text, without overwriting
the default register. Repeatable.

         Plug                  Mapping           duplicates...~
------------------------------------------------------------------------------
  <Plug>(Duplicate)            yd                text object
  <Plug>(DuplicateLine)        ydd               the same line [count] times
  <Plug>(DuplicateLines)       <M-d>             [count] lines
  <Plug>(Duplicate)            <M-d>             visual selection




ZETA STACK                                                    *yanktools-zeta*
==============================================================================

By postponing the `z` key to a yank/delete command, you can create a disposable
yank stack, from which elements are taken from the bottom when pasting, and
immediately removed. Example:

    `text 1`    (yzy)
    `text 2`    (yzy)
    `text 3`    (yzy)

the key sequence `zpzpzp` would then recreate the same sequence and consume the
stack.

Note: to paste `zp` or `zP` are used.
Note: visual mode uses uppercase Z mappings -> `ZY`, `ZD`, `ZP`



REPEATABILITY                                               *yanktools-repeat*
==============================================================================

These commands are repeatable:

* replace and duplicate operators
* delete and save in stack (both regular and zeta)

|repeat-vim| is supported for most `paste` operations. This means that you can
press |dot| to repeat the last paste command while keeping the same formatting
options of the last command.

Zeta mode is also supported: press "|.|" (dot) to continue pasting from the zeta
stack, until the stack is consumed.

Without |repeat-vim|, paste operations are repeatable, but without options,
and zeta paste is not repeatable.



CONTROL STACKS                                             *yanktools-control*
==============================================================================

By pressing `]y` or `[y`, you will move to a different position in the stack,
the first line of which will be echoed in the command line.

If your vim or nvim version supports floating popup windows, they will be used
instead.
                                                           *yanktools-preview*
If you want to see a preview window, use the `yup` mapping instead. This
window closes if you move the cursor to a different line, change tab, or paste
the entry. If the preview window is open, `]y` or `[y` will keep use it.

                                                       *yanktools-interactive*
By pressing `yui`, you will enter interactive paste. It will use |fzf-vim| if
available.

You can list stack items by pressing `yuY` (normal stack) or `yuZ` (zeta stack).
You can set an arbitrary index in the stack with [count]`yu0`.



MAPPINGS                                                  *yanktools-mappings*
==============================================================================

You can override every single mapping by defining your own: each mapping is
only assigned if the corresponding <Plug> hasn't been assigned by you.

*g:yanktools_no_mappings*       Default: 0

                              Completely disable mappings assignment. Plugs
                              are still available, and you'll need to assign
                              them by yourself.

*g:yanktools_main_key*          Default: ''

                              Unless mappings are disabled, you must set this
                              variable, or you will get an error before
                              entering vim. The content of this variable will
                              be the default prefix for yank, delete and
                              replace operators. Recommended value: 's'.

*g:yanktools_options_key*       Default: 'yu'

                              This will be the prefix for special commands.

*g:yanktools_black_hole*        Default: 1

                              Map c/x/<del> so that they use the black hole
                              register by default (|_|), unless a specific
                              register is provided.

*g:yanktools_map_zeta*          Default: 1

                              Map the plugs for the zeta stack.



OPTIONS                                                    *yanktools-options*
==============================================================================

*g:yanktools_persistance*       Default: 0

                              Enable/disable yank stack persistance across
                              vim restarts.

*g:yanktools_autoindent*        Default: 0

                              If autoindentation for paste commands should be
                              enabled by default. The command
                              `ToggleAutoIndent` (mapping `yuai`) will toggle
                              it on and off.

*g:yanktools_move_after*        Default: 0

                              If you want the cursor to always move at the end
                              of the pasted content. Some commands (replace
                              operator, zeta paste) use this method by
                              default.

*g:yanktools_record_mode*       Default: 0

                              If you want |yanktools-recording| mode to be
                              enabled by default (already at vim start).

*g:yanktools_repeat*            Default: 1

                              Enable/disable vim-repeat integration.

*g:yanktools_max_text_size*     Default: 1000

                              Text bigger than this number of characters will
                              never be added to the yank stack. Only valid in
                              recording mode.

*g:yanktools_max_stack_size*    Default: 100

                              If the stack size exceeds this limit, adding
                              a new element will cause an element to be
                              removed from the tail of the stack.

*g:yanktools_time_format*       Default: '%H:%M'

                              The format for |strftime()|, that is the time of
                              the yank, displayed in the preview window
                              statusline.


PLUGS                                                        *yanktools-plugs*
==============================================================================

Plugs and default mappings. Mappings assume |g:yanktools_main_key| to be 's'.

---------------------------------------+---------+----------------------------
Plug                                   |  Modes  | Default                    ~
---------------------------------------+---------+----------------------------
<Plug>(Yank)                           |   n x   |  sy
<Plug>(Cut)                            |   n x   |  sd
<Plug>(CutLine)                        |   n     |  sdd
<Plug>(Paste_p)                        |   n x   |  p
<Plug>(Paste_P)                        |   n x   |  P
<Plug>(PasteIndent_p)                  |   n     |  ]p
<Plug>(PasteIndent_P)                  |   n     |  [p
<Plug>(Replace)                        |   n     |  s
<Plug>(ReplaceLine)                    |   n     |  ss
<Plug>(ReplaceLines)                   |   n     |  srr
<Plug>(Duplicate)                      |   n x   |  yd / <M-d>
<Plug>(DuplicateLine)                  |   n     |  ydd
<Plug>(DuplicateLines)                 |   n     |  <M-d>
                                       |         |
<Plug>(SwapPasteNext)                  |   n     |  <M-d>
<Plug>(SwapPastePrevious)              |   n     |  <M-d>
<Plug>(YankNext)                       |   n     |  ]y
<Plug>(YankPrevious)                   |   n     |  [y
<Plug>(YankViewLast)                   |   n     |  ]Y
<Plug>(YankViewFirst)                  |   n     |  [Y
<Plug>(YankLast)                       |   n     |
<Plug>(YankFirst)                      |   n     |
                                       |         |
<Plug>(ZetaYank)                       |   n x   |  yz / ZY
<Plug>(ZetaDelete)                     |   n x   |  yz / ZD
<Plug>(ZetaDeleteLine)                 |   n     |  yz
<Plug>(ZetaPaste_p)                    |   n x   |  zp / ZP
<Plug>(ZetaPaste_P)                    |   n     |  zP
                                       |         |
<Plug>(YankSaveCurrent)                |   n     |  yus
<Plug>(ConvertYankType)                |   n     |  yuc
<Plug>(YanksPreview)                   |   n     |  yup
<Plug>(InteractivePaste)               |   n     |  yui
<Plug>(ToggleRecordYanks)              |   n     |  yur
<Plug>(ToggleAutoIndent)               |   n     |  yuai
<Plug>(ClearYankStack)                 |   n     |  yuxy
<Plug>(ClearZetaStack)                 |   n     |  yuxz
<Plug>(Yanks)                          |   n     |  yuY
<Plug>(ZetaYanks)                      |   n     |  yuZ
<Plug>(YanktoolsHelp)                  |   n     |  yu?



EX COMMANDS                                                     *yanktools-ex*
==============================================================================

A few ex commands are defined:

  :Yanks                  same as `yuY`
  :ZetaYanks              same as `yuZ`
  :ClearYankStack         same as `yuxy`
  :ClearZetaStack         same as `yuxz`
  :ToggleAutoIndent       same as `yuai`
  :InteractivePaste       same as `yui`
  :YanksPreview           same as `yup`
  :ToggleRecordYanks[!]   same as `yur`, verbose with <bang>



PERSISTANCE                                            *yanktools-persistance*
==============================================================================

Add to the vimrc:
>
  let g:yanktools_persistance = 1

Activate in the current session with:

  :YanksPersistance

But for this command to be effective at vim restart, you must also add
|g:yanktools_persistance| to your vimrc. It is still useful if you want to
start saving the stack in your current session.



CREDITS                                                    *yanktools-credits*
==============================================================================

Bram Moolenaar for Vim
Steve Vermeulen for |vim-easyclip|
Max Brunsfeld for |vim-yankstack|



LICENSE                                                    *yanktools-license*
==============================================================================

License: Same terms as Vim itself (see |license|)


==============================================================================
vim:tw=78:cc=79:sw=2:ts=2:ft=help:norl:nowrap:expandtab
